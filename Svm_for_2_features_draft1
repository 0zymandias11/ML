import numpy as np

class Support_Vector_Machine:
    def _init_(self):
        pass

    def fit(self,data):
        self.data=data
        transform=[[1,1],[-1,1],[1,-1],[-1,-1]]
        all_data=[]
        opt={}
        for yi in self.data:
            for featureset in self.data[yi]:
                for features in featureset:
                    all_data.append(features)

        print(all_data)  

        self.max_features=max(all_data)
       # self.min_feature=min(all_data)
        all_data=None

        step_sizes=[self.max_features*0.1,
                    self.max_features*0.01,
                    self.max_features*0.001]

        b_temp=2
        b_multiple=5
        temp_optimum=self.max_features*10

        for step in step_sizes:
            w = np.array([temp_optimum,temp_optimum])
            optimized = False
            while not optimized:
                for b in np.arange(-1*(self.max_features*b_multiple),
                                self.max_features*b_multiple,
                                step*b_multiple):
                    for t in transform:
                        w2 = w*t
                        found = True

                        for i in self.data:
                            for xi in self.data[i]:
                                yi=i
                                if not yi*(np.dot(w2,xi)+b) >= 1:
                                    found = False

                        if found:
                            opt[np.linalg.norm(w2)]=[w2,b]

                if w[0]<0 :
                    print("w",w)
                    optimized=True
                    print("Optimized")
                else:
                    w=w-step


            norms = sorted([n for n in opt])
            #||w|| : [w,b]
            optimum_choice = opt[norms[0]]
            self.w = optimum_choice[0]
            self.b = optimum_choice[1]
            temp_optimum = optimum_choice[0][0]+step*2

                    
        for i in self.data:
            for xi in self.data[i]:
                yi=i
                print(xi,':',yi*(np.dot(self.w,xi)+self.b))

    def predict(self,features):
        classification=np.sign(np.dot(np.array(features),self.w)+self.b)

        return classification


data_dict = {-1:np.array([[1,7],
                          [2,8],
                          [3,8],]),
             
             1:np.array([[5,1],
                         [6,-1],
                         [7,3],])}


svm = Support_Vector_Machine()
svm.fit(data_dict)

predict = [[0,10],
              [1,3],
              [3,4],
              [3,5],
              [5,5],
              [5,6],
              [6,-5],
              [5,8]]

for p in predict:
    svm.predict(p)

        
